name: Security Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.php'
      - '**.js'
      - '**.ts'
      - '**.jsx'
      - '**.tsx'
      - '**.yml'
      - '**.yaml'
      - '**.sh'
      - 'composer.json'
      - 'package.json'
  workflow_dispatch:
    inputs:
      model:
        description: 'Claude model to use for analysis'
        required: false
        default: 'claude-sonnet-4-20250514'
        type: choice
        options:
          - claude-sonnet-4-20250514
          - claude-opus-4-1-20250805
          - claude-3-5-sonnet-20241022
          - claude-3-haiku-20240307

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  # Using Claude Sonnet 4 for optimal balance of performance, speed, and cost
  # Model: claude-sonnet-4-20250514 (Released May 14, 2025)
  # This is the latest Sonnet 4 model with superior code analysis capabilities
  CLAUDE_MODEL: 'claude-sonnet-4-20250514'

jobs:
  security-review:
    name: Automated Security Review
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get changed files
      id: changed-files
      run: |
        echo "Fetching list of changed files..."
        
        # Get the base and head commits
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | tr '\n' ' ')
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Get the diff content
        git diff $BASE_SHA $HEAD_SHA > /tmp/pr_diff.txt
        
        # Count changes
        ADDITIONS=$(git diff --numstat $BASE_SHA $HEAD_SHA | awk '{sum+=$1} END {print sum}')
        DELETIONS=$(git diff --numstat $BASE_SHA $HEAD_SHA | awk '{sum+=$2} END {print sum}')
        
        echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT
        echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT
        
    - name: Prepare security review context
      id: prepare-context
      run: |
        cat > /tmp/security_review_prompt.txt << 'PROMPT_EOF'
        You are a senior security engineer conducting a focused security review of code changes.
        
        CHANGED FILES: ${{ steps.changed-files.outputs.changed_files }}
        
        STATISTICS:
        - Lines added: ${{ steps.changed-files.outputs.additions }}
        - Lines deleted: ${{ steps.changed-files.outputs.deletions }}
        
        OBJECTIVE:
        Review the code changes for HIGH-CONFIDENCE security vulnerabilities with real exploitation potential.
        Focus ONLY on newly introduced vulnerabilities, not existing code issues.
        
        SECURITY CATEGORIES TO EXAMINE:
        
        1. Input Validation Vulnerabilities:
           - SQL injection via unsanitized user input
           - Command injection in system calls
           - Path traversal in file operations
           - XXE injection in XML parsing
           - Template injection
        
        2. Authentication & Authorization:
           - Authentication bypass logic
           - Privilege escalation paths
           - Session management flaws
           - JWT vulnerabilities
        
        3. Cryptography & Secrets:
           - Hardcoded API keys or passwords
           - Weak cryptographic implementations
           - Insecure random number generation
        
        4. Injection & Code Execution:
           - Remote code execution
           - XSS vulnerabilities
           - Deserialization vulnerabilities
           - eval() or similar dangerous functions
        
        5. Data Exposure:
           - Sensitive data in logs
           - PII handling violations
           - API endpoint data leakage
        
        REQUIREMENTS:
        - Only report issues with >80% confidence of exploitability
        - Skip theoretical issues or style concerns
        - Focus on vulnerabilities that could lead to real compromise
        - Provide specific line numbers and code examples
        - Include actionable fix recommendations
        
        OUTPUT FORMAT:
        For each finding, provide:
        - File and line number
        - Severity (HIGH/MEDIUM/LOW)
        - Vulnerability type
        - Description
        - Exploit scenario
        - Recommended fix
        
        If no vulnerabilities found, respond with: "‚úÖ No security vulnerabilities detected"
        PROMPT_EOF
        
    - name: Run Claude security analysis
      id: claude-analysis
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "Running security analysis with Claude..."
        
        # Check if API key is set
        if [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "‚ùå Error: ANTHROPIC_API_KEY is not set"
          echo "‚ö†Ô∏è Security review requires Anthropic API key. Please set it as a GitHub secret." > /tmp/security_findings.md
          echo "has_findings=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Prepare the API request
        DIFF_CONTENT=$(cat /tmp/pr_diff.txt | head -c 50000 | jq -Rs .)
        PROMPT_CONTENT=$(cat /tmp/security_review_prompt.txt | jq -Rs .)
        
        # Use workflow input model if provided, otherwise use default
        MODEL="${{ github.event.inputs.model || env.CLAUDE_MODEL }}"
        echo "Using model: $MODEL"
        
        # Create the API request body
        cat > /tmp/api_request.json <<APIREQ
        {
          "model": "${MODEL}",
          "max_tokens": 4096,
          "messages": [
            {
              "role": "user",
              "content": "Review this code diff for security vulnerabilities:\n\n${PROMPT_CONTENT}\n\nDIFF CONTENT:\n${DIFF_CONTENT}"
            }
          ],
          "temperature": 0.2
        }
        APIREQ
        
        # Make API call to Claude with better error handling
        echo "Making API call to Claude..."
        RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST https://api.anthropic.com/v1/messages \
          -H "Content-Type: application/json" \
          -H "x-api-key: $ANTHROPIC_API_KEY" \
          -H "anthropic-version: 2023-06-01" \
          -d @/tmp/api_request.json)
        
        # Extract HTTP status
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1 | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
        
        echo "HTTP Status: $HTTP_STATUS"
        
        # Check for errors
        if [ "$HTTP_STATUS" != "200" ]; then
          echo "‚ùå API call failed with status: $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          
          # Check for specific error types
          if [ "$HTTP_STATUS" == "401" ]; then
            echo "‚ö†Ô∏è Authentication failed. Please check your ANTHROPIC_API_KEY." > /tmp/security_findings.md
          elif [ "$HTTP_STATUS" == "429" ]; then
            echo "‚ö†Ô∏è Rate limit exceeded. Please try again later." > /tmp/security_findings.md
          elif [ "$HTTP_STATUS" == "400" ]; then
            echo "‚ö†Ô∏è Bad request. Model name might be incorrect: $MODEL" > /tmp/security_findings.md
            echo "Response details: $RESPONSE_BODY"
          else
            echo "‚ö†Ô∏è Security review failed with error $HTTP_STATUS. Please check the workflow logs." > /tmp/security_findings.md
          fi
          
          echo "has_findings=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Extract the response content
        echo "$RESPONSE_BODY" > /tmp/api_response.json
        
        # Try to extract the text content
        if echo "$RESPONSE_BODY" | jq -e '.content[0].text' > /dev/null 2>&1; then
          echo "$RESPONSE_BODY" | jq -r '.content[0].text' > /tmp/security_findings.md
        else
          echo "‚ùå Failed to parse API response"
          echo "Response: $RESPONSE_BODY"
          echo "‚ö†Ô∏è Security review could not parse the API response. Please check the workflow logs." > /tmp/security_findings.md
        fi
        
        # Check if there were any findings
        if grep -q "‚úÖ No security vulnerabilities detected" /tmp/security_findings.md; then
          echo "has_findings=false" >> $GITHUB_OUTPUT
        else
          echo "has_findings=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Post review comment
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Read the security findings
          let findings = '';
          try {
            findings = fs.readFileSync('/tmp/security_findings.md', 'utf8');
          } catch (error) {
            findings = '‚ö†Ô∏è Security review could not be completed. Please check the workflow logs.';
          }
          
          // Prepare the comment header
          const modelUsed = '${{ github.event.inputs.model || env.CLAUDE_MODEL }}';
          const header = `## üîí Automated Security Review
          
          **Reviewer:** Claude (${modelUsed})
          **Commit:** ${{ github.event.pull_request.head.sha }}
          **Files Changed:** ${{ steps.changed-files.outputs.changed_files }}
          
          ---
          
          `;
          
          // Prepare the comment footer
          const footer = `
          
          ---
          
          <details>
          <summary>üìã Security Review Guidelines</summary>
          
          This automated review checks for:
          - SQL injection vulnerabilities
          - Cross-site scripting (XSS)
          - Command injection
          - Authentication/authorization flaws
          - Hardcoded secrets
          - Insecure cryptography
          - Data exposure risks
          
          False positives may occur. Please review all findings carefully.
          </details>
          
          *Generated by [Claude Security Review](.github/workflows/security-review.yml)*`;
          
          // Create the full comment
          const comment = header + findings + footer;
          
          // Post the comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });
          
    - name: Set status check
      if: always()
      run: |
        if [[ "${{ steps.claude-analysis.outputs.has_findings }}" == "true" ]]; then
          echo "‚ö†Ô∏è Security issues found. Please review the PR comment for details."
          exit 1
        else
          echo "‚úÖ Security review passed - no vulnerabilities detected."
        fi
        
    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-review-report
        path: /tmp/security_findings.md
        retention-days: 30

  # Optional: Run additional security tools
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    if: contains(fromJSON('["composer.json", "composer.lock", "package.json", "package-lock.json"]'), github.event.pull_request.changed_files)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        tools: composer:v2
        
    - name: Check PHP dependencies
      if: hashFiles('composer.lock') != ''
      run: |
        composer install --no-scripts --no-progress
        composer audit || true
        
    - name: Setup Node.js
      if: hashFiles('package-lock.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Check Node.js dependencies
      if: hashFiles('package-lock.json') != ''
      run: |
        npm ci
        npm audit --audit-level=high || true

  code-scanning:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        coverage: none
        tools: phpstan, psalm
        
    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: composer-
        
    - name: Install dependencies
      run: composer install --no-scripts --no-progress
      
    - name: Run PHPStan
      if: hashFiles('phpstan.neon') != ''
      run: phpstan analyze --no-progress || true
      
    - name: Run Psalm
      if: hashFiles('psalm.xml') != ''
      run: psalm --no-progress || true
      
    - name: Check for common security patterns
      run: |
        echo "Checking for common security anti-patterns..."
        
        # Check for eval() usage
        if grep -r "eval(" --include="*.php" .; then
          echo "‚ö†Ô∏è Warning: eval() usage detected"
        fi
        
        # Check for exec/system calls
        if grep -r -E "(exec|system|passthru|shell_exec)\(" --include="*.php" .; then
          echo "‚ö†Ô∏è Warning: Shell command execution detected"
        fi
        
        # Check for md5/sha1 for passwords
        if grep -r -E "(md5|sha1)\(.*(pass|pwd)" --include="*.php" .; then
          echo "‚ö†Ô∏è Warning: Weak password hashing detected"
        fi
        
        # Check for SQL queries with direct variable interpolation
        if grep -r -E "query.*\\\$_(GET|POST|REQUEST)" --include="*.php" .; then
          echo "‚ö†Ô∏è Warning: Potential SQL injection detected"
        fi
        
        echo "Pattern checking complete."